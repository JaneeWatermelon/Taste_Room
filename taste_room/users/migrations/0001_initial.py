# Generated by Django 5.1.6 on 2025-03-07 08:12

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('additions', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, default='', max_length=128, null=True, verbose_name='Название')),
                ('icon', models.ImageField(upload_to='achiv_icons/', verbose_name='Иконка')),
                ('level', models.PositiveSmallIntegerField(choices=[(1, 'Серебро'), (2, 'Золото'), (3, 'Рубин')], verbose_name='Уровень')),
                ('condition_self', models.CharField(max_length=128, verbose_name='Конкретное условие')),
            ],
            options={
                'verbose_name': 'Достижение',
                'verbose_name_plural': 'Достижения',
            },
        ),
        migrations.CreateModel(
            name='CategoryAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=64, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Категория достижения',
                'verbose_name_plural': 'Категории достижений',
            },
        ),
        migrations.CreateModel(
            name='GeneralAchievementCondition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=256, verbose_name='Общее условие')),
            ],
            options={
                'verbose_name': 'Условие получения достижения',
                'verbose_name_plural': 'Условия получения достижений',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(blank=True, default='', max_length=32, null=True, verbose_name='Отображаемое имя')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='img/avatars/', verbose_name='Аватарка')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Электронная почта')),
                ('background_color', models.CharField(blank=True, default='', max_length=64, null=True, verbose_name='Цвет фона')),
                ('description_profile', models.TextField(blank=True, default='', max_length=512, null=True, verbose_name='Описание профиля')),
                ('description_recipe', models.TextField(blank=True, default='', max_length=512, null=True, verbose_name='Описание для рецепта')),
                ('description_news', models.TextField(blank=True, default='', max_length=512, null=True, verbose_name='Описание для статьи')),
                ('liked_recipes_id', models.JSONField(blank=True, default=list, null=True, verbose_name='Понравившиеся рецепты')),
                ('liked_comments_id', models.JSONField(blank=True, default=list, null=True, verbose_name='Понравившиеся комментарии')),
                ('subscribers_id', models.JSONField(blank=True, default=list, null=True, verbose_name='Подписчики')),
                ('subscriptions_id', models.JSONField(blank=True, default=list, null=True, verbose_name='Подписки')),
                ('choosed_achiv', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Выбранное достижение')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('socials', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='additions.socials', verbose_name='Соцсети')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('achivs', models.ManyToManyField(to='users.achievement', verbose_name='Полученные достижения')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ['username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='achievement',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.categoryachievement', verbose_name='Категория'),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(default='', max_length=1024, verbose_name='Текст')),
                ('published_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата публикации')),
                ('likes', models.PositiveSmallIntegerField(default=0, verbose_name='Кол-во лайков')),
                ('dislikes', models.PositiveSmallIntegerField(default=0, verbose_name='Кол-во дизлайков')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='users.comment', verbose_name='Ответный комментарий')),
            ],
            options={
                'verbose_name': 'Комментарий',
                'verbose_name_plural': 'Комментарии',
                'ordering': ['author'],
            },
        ),
        migrations.AddField(
            model_name='achievement',
            name='condition_general',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.generalachievementcondition', verbose_name='Общее условие'),
        ),
    ]
