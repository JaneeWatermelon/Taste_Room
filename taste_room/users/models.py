import random

from django.contrib.contenttypes.fields import GenericForeignKey
from django.contrib.contenttypes.models import ContentType
from django.core.validators import MaxValueValidator, MinValueValidator
from django.db import models
from django.contrib.auth.models import AbstractUser
from django.utils.text import slugify

from additions.models import Socials

def transliterate_russian_to_pseudo_english(text):
    transliteration_table = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g',
        '–¥': 'd', '–µ': 'e', '—ë': 'yo', '–∂': 'zh',
        '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k',
        '–ª': 'l', '–º': 'm', '–Ω': 'n', '–æ': 'o',
        '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't',
        '—É': 'u', '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts',
        '—á': 'ch', '—à': 'sh', '—â': 'shch', '—ä': '',
        '—å': '', '—ç': 'e', '—ã': 'y', '—é': 'yu', '—è': 'ya',
    }

    # –ó–∞–º–µ–Ω—è–µ–º –∫–∞–∂–¥—É—é –±—É–∫–≤—É –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é
    transliterated_text = ''.join(transliteration_table.get(char.lower(), char.lower()) for char in text)
    return transliterated_text

def get_unique_slug(instance, model_class, old_slug):
    new_slug = old_slug
    all_slug_models = model_class.objects.filter(slug=new_slug)
    if all_slug_models.exists() and all_slug_models.first().id != instance.id:
        new_slug = f"{old_slug}-{instance.id}"
    return new_slug


class AchivLevels:
    List = [
        (1, "–°–µ—Ä–µ–±—Ä–æ"),
        (2, "–ó–æ–ª–æ—Ç–æ"),
        (3, "–†—É–±–∏–Ω"),
    ]

class DisplayNames:
    List = [
        (1, "–í–∫—É—Å–Ω–∞—è –ø–µ—á–µ–Ω—å–∫–∞ üç™"),
        (2, "–ö–∞—Ä–∞–º–µ–ª—å–Ω—ã–π –ª–∞—Ç—Ç–µ ‚òï"),
        (3, "–ó–∞–±–∞–≤–Ω—ã–π –ø–∏—Ä–æ–∂–æ–∫ ü•ü"),
        (4, "–°–ª–∞–¥–∫–∏–π –∫–µ–∫—Å üßÅ"),
        (5, "–ê—Ä–æ–º–∞—Ç–Ω—ã–π –±–∞–≥–µ—Ç ü•ñ"),
        (6, "–°–æ—á–Ω—ã–π –±—É—Ä–≥–µ—Ä üçî"),
        (7, "–•—Ä—É—Å—Ç—è—â–∏–π –∫—Ä—É–∞—Å—Å–∞–Ω ü•ê"),
        (8, "–ù–µ–∂–Ω—ã–π —á–∏–∑–∫–µ–π–∫ üç∞"),
        (9, "–ü—Ä—è–Ω—ã–π –≥–ª–∏–Ω—Ç–≤–µ–π–Ω üç∑"),
        (10, "–§—Ä—É–∫—Ç–æ–≤—ã–π —Å–º—É–∑–∏ üçπ"),
        (11, "–°–≤–µ–∂–∏–π —Å–∞–ª–∞—Ç ü•ó"),
        (12, "–î–æ–º–∞—à–Ω—è—è –ø–∏—Ü—Ü–∞ üçï"),
        (13, "–°—ã—Ç–Ω—ã–π —Ä–∞–º–µ–Ω üçú"),
        (14, "–ú—è—Ç–Ω—ã–π –º–æ—Ö–∏—Ç–æ üç∏"),
        (15, "–ó–æ–ª–æ—Ç–æ–π –±–ª–∏–Ω—á–∏–∫ ü•û"),

        (16, "–°–ª–∏–≤–æ—á–Ω—ã–π –ø—É–¥–∏–Ω–≥ üçÆ"),
        (17, "–û—Å—Ç—Ä—ã–π —á–∏–ª–∏ üå∂Ô∏è"),
        (18, "–ê—Ä–±—É–∑–Ω—ã–π —â–µ—Ä–±–µ—Ç üçâ"),
        (19, "–ú–µ–¥–æ–≤—ã–π –ø—Ä—è–Ω–∏–∫ üçØ"),
        (20, "–ö–ª—É–±–Ω–∏—á–Ω—ã–π —Ç–æ—Ä—Ç"),
        (21, "–ö–æ–ø—á—ë–Ω—ã–π –±–µ–∫–æ–Ω ü•ì"),
        (22, "–í–∞–Ω–∏–ª—å–Ω–æ–µ –º–æ—Ä–æ–∂–µ–Ω–æ–µ üç¶"),
        (23, "–ì—Ä–∏–±–Ω–æ–π —Å—É–ø—á–∏–∫ üçÑ"),
        (24, "–®–æ–∫–æ–ª–∞–¥–Ω—ã–π —Ñ–æ–Ω–¥–∞–Ω üç´"),
        (25, "–õ–∏–º–æ–Ω–Ω—ã–π —Ç–∞—Ä—Ç üçã"),
        (26, "–ö–æ–∫–æ—Å–æ–≤—ã–π –º–∞–∫–∞—Ä—É–Ω ü••"),
        (27, "–û—Ä–µ—Ö–æ–≤—ã–π –±—Ä–∞—É–Ω–∏ ü•ú"),
        (28, "–¢—ã–∫–≤–µ–Ω–Ω—ã–π –ª–∞—Ç—Ç–µ üéÉ"),
        (29, "–ú–∞–ª–∏–Ω–æ–≤—ã–π –¥–∂–µ–º üçì"),
        (30, "–°—ã—Ä–Ω—ã–π —Ñ–æ–Ω–¥—é üßÄ"),
    ]

class CategoryAchievement(models.Model):
    title = models.CharField(max_length=64, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ")

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"
        verbose_name_plural = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"

class GeneralAchievementCondition(models.Model):
    title = models.CharField(max_length=256, verbose_name="–û–±—â–µ–µ —É—Å–ª–æ–≤–∏–µ")

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = "–£—Å–ª–æ–≤–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"
        verbose_name_plural = "–£—Å–ª–æ–≤–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"

class Achievement(models.Model):
    title = models.CharField(default="", max_length=128, blank=True, null=True, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ")
    icon = models.FileField(upload_to="achiv_icons/", verbose_name="–ò–∫–æ–Ω–∫–∞")
    level = models.PositiveSmallIntegerField(choices=AchivLevels.List, verbose_name="–£—Ä–æ–≤–µ–Ω—å")
    category = models.ForeignKey(to=CategoryAchievement, on_delete=models.CASCADE, verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
    condition_general = models.ForeignKey(to=GeneralAchievementCondition, on_delete=models.CASCADE, verbose_name="–û–±—â–µ–µ —É—Å–ª–æ–≤–∏–µ")
    condition_self = models.CharField(max_length=128, verbose_name="–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ")

    class Meta:
        verbose_name = "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ"
        verbose_name_plural = "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"

class User(AbstractUser):
    name = models.CharField(default=DisplayNames.List[random.randint(0, 29)][1], blank=True, null=True, max_length=32, verbose_name="–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è")
    avatar = models.ImageField(upload_to='users_avatars/', blank=True, null=True, verbose_name="–ê–≤–∞—Ç–∞—Ä–∫–∞")
    email = models.EmailField(unique=True, verbose_name="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞")
    background_color = models.CharField(default="", max_length=64, blank=True, null=True, verbose_name="–¶–≤–µ—Ç —Ñ–æ–Ω–∞")

    description_profile = models.TextField(default="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å! –Ø —É–≤–ª–µ—á–µ–Ω(–∞) –∫—É–ª–∏–Ω–∞—Ä–∏–µ–π –∏ –≤–µ—Ä—é, "
                                                   "—á—Ç–æ –≤–∫—É—Å–Ω–∞—è –µ–¥–∞ –¥–µ–ª–∞–µ—Ç –∂–∏–∑–Ω—å —è—Ä—á–µ. –ù–∞–¥–µ—é—Å—å, –º–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã –∏ "
                                                   "—Å–æ–≤–µ—Ç—ã –±—É–¥—É—Ç –ø–æ–ª–µ–∑–Ω—ã –¥–ª—è –≤–∞—Å!",
                                           blank=True, null=True, max_length=512, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è")
    description_recipe = models.TextField(default="–ü—Ä–∏–≤–µ—Ç! –Ø –æ–±–æ–∂–∞—é –≥–æ—Ç–æ–≤–∏—Ç—å –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫—É—Ö–Ω–µ. "
                                                  "–î–ª—è –º–µ–Ω—è –∫—É–ª–∏–Ω–∞—Ä–∏—è ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å, –∞ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ. "
                                                  "–ë—É–¥—É —Ä–∞–¥(–∞) –¥–µ–ª–∏—Ç—å—Å—è —Å –≤–∞–º–∏ —Å–≤–æ–∏–º–∏ –ª—é–±–∏–º—ã–º–∏ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ –∏ —Å–æ–≤–µ—Ç–∞–º–∏!",
                                          blank=True, null=True, max_length=512, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞")
    description_news = models.TextField(default="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–π –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –±–ª–æ–≥! "
                                                "–ó–¥–µ—Å—å —è –¥–µ–ª—é—Å—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏, —Å–æ–≤–µ—Ç–∞–º–∏ –∏ –∏—Å—Ç–æ—Ä–∏—è–º–∏ –æ –µ–¥–µ. "
                                                "–ù–∞–¥–µ—é—Å—å, –º–æ–∏ —Å—Ç–∞—Ç—å–∏ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –æ—Ç–∫—Ä—ã—Ç—å –¥–ª—è —Å–µ–±—è —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –∏ "
                                                "–≤–¥–æ—Ö–Ω–æ–≤—è—Ç –Ω–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã!",
                                        blank=True, null=True, max_length=512, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—å–∏")

    socials = models.ForeignKey(to=Socials, blank=True, null=True, on_delete=models.CASCADE, verbose_name="–°–æ—Ü—Å–µ—Ç–∏")

    liked_recipes_id = models.JSONField(default=list, blank=True, null=True, verbose_name="–ü–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ä–µ—Ü–µ–ø—Ç—ã")
    liked_comments_id = models.JSONField(default=list, blank=True, null=True, verbose_name="–õ–∞–π–∫–Ω—É—Ç—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
    disliked_comments_id = models.JSONField(default=list, blank=True, null=True, verbose_name="–î–∏–∑–ª–∞–π–∫–Ω—É—Ç—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
    subscribers_id = models.JSONField(default=list, blank=True, null=True, verbose_name="–ü–æ–¥–ø–∏—Å—á–∏–∫–∏")
    subscriptions_id = models.JSONField(default=list, blank=True, null=True, verbose_name="–ü–æ–¥–ø–∏—Å–∫–∏")

    choosed_achiv = models.PositiveSmallIntegerField(blank=True, null=True, verbose_name="–í—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ")
    achivs = models.ManyToManyField(to=Achievement, blank=True, verbose_name="–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")

    def __str__(self):
        return self.username

    class Meta:
        ordering = ['username']
        verbose_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        verbose_name_plural = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"


class Comment(models.Model):
    text = models.TextField(default="", max_length=1024, verbose_name="–¢–µ–∫—Å—Ç")
    image = models.ImageField(upload_to='comments_images/', blank=True, null=True, verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    author = models.ForeignKey(to=User, on_delete=models.CASCADE, verbose_name="–ê–≤—Ç–æ—Ä")
    published_date = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
    likes = models.PositiveSmallIntegerField(default=0, verbose_name="–ö–æ–ª-–≤–æ –ª–∞–π–∫–æ–≤")
    dislikes = models.PositiveSmallIntegerField(default=0, verbose_name="–ö–æ–ª-–≤–æ –¥–∏–∑–ª–∞–π–∫–æ–≤")
    parent = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True, related_name='children',
                               verbose_name="–û—Ç–≤–µ—Ç–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")

    def __str__(self):
        return f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–≤—Ç–æ—Ä–∞: {self.author}"

    class Meta:
        ordering = ['author']
        verbose_name = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
        verbose_name_plural = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"

class Review(models.Model):
    author = models.ForeignKey(to=User, blank=True, null=True, on_delete=models.CASCADE, verbose_name="–ê–≤—Ç–æ—Ä")
    rating = models.PositiveSmallIntegerField(default=0,
                                              validators=[
                                                  MaxValueValidator(5),
                                                  MinValueValidator(1)
                                              ], verbose_name="–†–µ–π—Ç–∏–Ω–≥")

    class Meta:
        verbose_name = "–û—Ü–µ–Ω–∫–∞"
        verbose_name_plural = "–û—Ü–µ–Ω–∫–∏"

    def __str__(self):
        return f"–û—Ç {self.author}"
